name: CI/CD to EC2
 
on:
  push:
    branches: [ "QA" ]
 
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
 
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
 
      - name: Build Docker Image
        run: docker build -t anggeloo/microservice-delete-order:latest .
 
      - name: Push Docker Image
        run: docker push anggeloo/microservice-delete-order:latest

  deploy-to-ec2:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "Iniciando despliegue en EC2..."
            
            # 1) Bajar la última imagen del Docker Hub
            docker pull anggeloo/microservice-delete-order:latest
            
            # 2) Detener y eliminar el contenedor previo si existe
            docker stop order_delete_container || true
            docker rm order_delete_container || true
            
            # 3) Eliminar cualquier imagen vieja para ahorrar espacio
            docker image prune -f

            # 4) Crear el archivo .env con las credenciales correctas
            echo "MYSQL_CONNECTION_STRING=Server=${{ secrets.DB_HOST }};Database=${{ secrets.DB_NAME }};User=${{ secrets.DB_USER }};Password=${{ secrets.DB_PASS }}" > .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            
            # 5) Correr el contenedor con la configuración correcta
            docker run -d --name order_delete_container \
              --env-file .env \
              -p 83:80 \
              -p 5003:5000 \
              anggeloo/microservice-delete-order:latest

            echo "Despliegue completado exitosamente."
